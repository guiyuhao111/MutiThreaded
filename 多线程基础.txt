https://www.cnblogs.com/bqh10086/p/6499185.html
https://blog.csdn.net/achellies/article/details/7094467
https://blog.csdn.net/javazejian/article/details/72828483
1.java中如何实现多线程?
	---1.1.继承Thread类:是真正的处理线程的类
	---1.2.实现Runnable接口:相当于任务,最后还是要依靠Thread类来执行

2.Thread Runnable 和 Callable
	2.1:Thread类和Runnable类的区别?
		---2.1.1:实现Runnable的同时可以继承其它的类,如果是继承Thread的话将不能继承其它的类
		---2.1.2:Runnable其实就是任务的抽象,我们实现了该任务然后将这个任务交给线程取处理, 实际上要比继承这个线程的耦合度低
	2.2:Callable是如何实现的?
		2.2.1:一个非抽象的类实现Callable时必须要重写Call方法
		2.2.2:FutureTask主要有 waiter(主要是调用Get方法的线程的链表) runnner(运行方法所在的线程) callable(Callable对象) outCome(call方法运行的结果) state(运行方法所在的线程所在的状态)
		FutureTask实现了RunnableFuture接口,RunnableFuture继承了Runnable类,可以把FutureTesk理解成有返回值任务的抽象,
		2.2.3:执行过程
			---1.FutureTask的Run方法:先将Callable对象传给FutureTask当有线程在运行有返回值任务的时候即是调用FutureTask的run()方法:
			run方法会调用callable的call(),然后获取返回的结果,将返回的结果存放到 outCome里面,然后唤醒waiter里面的所有线程
			---2.FutureTask的get方法:获得执行结果的线程调用get方法:
				---2.1:创建一个waitNode节点,将waitNode节点放到等待队列里面去
				---2.2:将当前线程挂起(当运行方法的线程获得了返回值时获得结果的线程被唤醒)
				---2.3:获得结果将结果赋予FutureTask属性outCome
			---3.调用runnable的call方法:
				---3.1:设计运行方法的线程中断标记
		2.2.4:该怎样理解Callable?
			---1.callable是一种规则,这种规则规定了有返回值线程的方法应该怎样命名.实际上一个有返回值的线程主要是靠FutureTask.当有线程要获得有另一个线程的返回值,FutureTask会将该线程挂起,直到有目标线程调用完call方法,
			将call方法的返回的公共资源FutureTask对象里面,其他线程从FutureTask对象里面取就可以了(有返回值的线程通过调用FutureTask的run方法然后再调用callable的call方法,获得结果后将结果存到FutureTask对象里面然后唤醒
			被挂起的线程即是FutureTask的属性waiter里面的线程.当一个线程想要获得有返回值线程的方法时,该线程会被存放在FutureTask的waiter里面,并且被挂起,直到获得返回值的线程运行完call方法唤醒所有被等待的线程,唤醒后
			该线程会从FutureTask里面获得返回值.)

3.什么叫线程安全什么叫线程不安全？
	---3.1.多个线程并发修改同一个资源时就会产生线程安全的问题。

4.线程同步的几种方法:
	4.1:synchronized介绍:synchronized是(一个基于JVM层上的)关键字
		---4.1.1:synchronized可以修饰一个方法或一段代码块,此时会产生一个对象锁和一个同步代码块,当有线程尝试对这个方法和代码块进行访问时会首先尝试获取synchronized锁修饰的对象的对象锁,
		如果没有获取到对象的对象锁会进入阻塞状态直到其他线程释放该对象的对象锁.获得该对象的对象锁之后就可以运行这段代码块

		原理:当第一次有线程访问synchronized修饰的代码的时候,会修改被synchronized锁住的对象的对象头中MarkWord结构中锁标志位为01(重量级锁)并且MarkWord其他位存储Monitor对象的地址Monitor是ObjectMonitor实现的
		ObjectMonitor(锁对象)主要由_WaitSet队列 _EntrySet队列 _owner引用 _count计数,第一次进入此代码时_count属性加1,_owner指向拥有该ObjectMonitor线程的地址,其他线程再进入此代码块时会检测_count是否为0,_owner
		是否为null,不符合条件此线程会被存储在_EntrySet队列中进入阻塞状态,当拥有锁的线程运行完这段同步代码_count属性减1和_owner设置为null,_EntrySet中的线程又会竞争该ObjectMonitor

		---4.1.2:synchronized用来锁定某个对象，体现的是标准的互斥锁mutex的机制，synchronized代码块的开始即是lock该mutex，代码块的结束即是unlock。
		什么是互斥锁?即同一时刻只有一个线程来访问该对象

		---4.1.3:synchronized使用:
			---4.1.3.1:放在静态方法上锁的是当前类对象
			---4.1.3.2:放在普通方法上锁的是当前实例对象
			---4.1.3.3:放在方法块上锁是 Synchronized 括号里的对象

		---4.1.4:synchronized修饰代码块和方法的区别?
			---4.1.4.1:修饰代码块时会通过MonitorEnter MonitorExit指令来控制这段同步代码块,当线程遇到MonitorEnter指令时会尝试获取该对象的对象锁,遇到MonitorExit指令时会释放该对象锁
				   修饰方法时通过访问该方法在方法去中保存的Acc_Synchronized标志位,如果Acc_Synchronized被设置了会尝试获取该对象的对象锁

		---4.1.5:为什么说synchornized是可重入?
			---4.1.5.1:synchronzied是一个可重入的同步锁,进入一个代码块中时还可以进入同一个锁对象的代码块且没有阻塞
	
	4.2:Lock介绍:Lock是一个接口是在JDK层上的,其主要实现有ReentrantLock类,此类提供了四种方法来获得锁,其底层原理与synchronized无差别都是monitor机制;
	---4.2.1:Lock()方法除了需要手动释放锁之外与synchronized并无多大区别
	---4.2.2:tryLock()方法可以知道获取锁的状态,通常和if作为判断看当前是否获取锁没有获取锁
	---4.2.3:tryLock(Time,TimeUnit)方法可以在获取锁的时候延迟一段时间, 如果在获得锁延迟期间被中断当前线程会抛出InterrupedException异常并且清除锁标记
	---4.2.4:LockInterruped()方法没有获取到锁会进入阻塞状态,如果在阻塞期间被中断则会抛出异常,并且清除锁标记

	4.3:Lock和synchronized到底有啥区别?有了synchronized为甚么又要重写个Lock机制?
	---1.Lock是可以在等待阻塞期间可以被中断等待
	---2.Lock可以知道当前线程获得锁的状态
	---3.Lock可以设置为公平锁,所谓公平锁即是可以根据请求锁的循序获得锁

	volatile(volatile不能算是一种同步机制,此处放在这里只是作比较):
		---原子性:原子一般形容是最小的单位是不可能拆分的,比如a=10这个操作是不可能拆分的我们就称它具备有原子性,像a=a+1这样的操作可以拆分成先加一在等于,就不具备原子性,非原子操作就会具有线程安全的问题,需要我们使用一些同步技术
		来保证线程安全的问题.volatile不具备原子性

		---可见性:一个线程对数据的修改对另一个线程是可见的,当我们在某些变量前加上volatile修饰符,当工作内存读取volitle修改的变量时读取前相对于普通变量的读取增加了一条store屏障指令,这可以使工作内存直接从主内存中读取数据,在修改volatile变量的值的时候回多一条load指令,此时会将此变量刷新到主内存

		---有序性:为了尽可能的减少cpu运行速度远大于读取主内存数据的速度所带来的cpu空置的影响虚拟机会对我们编写的没有依赖的代码按照一定规则进行重排序,volatile关键字修饰的变量能再写数据之是插入内存屏障指令来保证变量写操作不会被重排序,即是不可能再操作volatile变量时其前面的指令不会再其后执行,其后面的指令不会再其前面执行

		---volatile虽然具备有可见性和有序性但是不具备原子性,所以当一些非原子性的操作发生在volatile上时他还是线程不安全的

5.如何理解锁是对象?:
	---5.1:每个对象都有两个字节的对象头,对象头其中一个字节存储的是锁相关的信息,这个字节中有两个位存储的是锁标志位,其他的位会根据锁标志位状态来存储不同的数据,例如锁标志位为10时其他为储存的是monitor
	对象的地址,monitor被称为管程,monitor是由ObjectMonitor来实现的.

6.什么是死锁?
	---6.1.死锁:多个线程都在等待对方释放锁时会产生死锁

7.线程常用方法介绍:
	---7.1:notifyAll()/notify():
		---1.修改使当前对象内置的条件变量condition，但由于mutex的存在，被阻塞线程不会立刻执行，notify()会不确定的唤醒某个线程,notifyAll()则唤醒所有线程
	---7.2:wait():
		---1.释放当前线程被synchronized所锁定mutex,只有释放掉了这个其他竞争这个互斥锁的线程才能得以运行
		---2.使当前线程阻塞在对象内置的条件变量condition (这种被阻塞的线程没有获得锁的资格) 另一种理解:使当前线程进入monitor的阻塞队列
		---3.假如被notify();和notifyAll();修改了对象内置条件变量condition,会重新锁定该对象的mutex进入就绪状态,获得锁的线程可以执行 另一种理解:是当前线程出阻塞队列
	---7.3:sleep():使当前线程阻塞不会释放锁,任然占用操作系统所分配的时间片
	---7.4:yeild():使当前线程进入就绪状态,有可能当前线程又立刻获得操作系统分配的时间片又立刻执行

	---7.5:stop():该方法已不推荐使用
	---7.6:interrupt():该方法会将当前调用此方法的线程状态改为中断状态但是线程不会真正中断 
	---7.7:isInterrupt():判断线程是否是中断状态,该方法经常配合interrupt()方法来中断线程  
		---在线程外面通过thread对象的interrupt()方法使当前线程修改中断标志,然后在线程里面通过Thread.currentThread().isInterrupted()判断当前线程是否被中断;
	---7.8:join():等待调用的线程执行完才执行当前线程

8:定时器:Timer,定时任务:TimerTask
1.相关文献:
---1.Timer是一种线程设施，用于安排以后在后台线程中执行的任务。可安排任务执行一次，或者定期重复执行，可以看成一个定时器，可以调度TimerTask。
     TimerTask是一个抽象类，实现了Runnable接口，所以具备了多线程的能力。
---2.自己的理解,Timer有两个属性:
	---1.TimerTask队列,TimerTask队列实际上是个TimerTask数组,任务执行时一个Timer可以启动多个TimerTask实际上用TimerTask队列存放
	---2.TimerThread:TimerThread继承了Thread
     TimerTask实现了Runnable接口

---3.相关方法:
	1.执行任务:timer.schedule(new TimerCir(),2000,3000);
	2.取消任务的执行:cancel()

9:线程池详解:(这段代码不是jdk1.8线程池的实现)
public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
　　　　　　 //如果线程数大于等于基本线程数或者线程创建失败，将任务加入队列
        if (poolSize >= corePoolSize || !addIfUnderCorePoolSize(command)) {
　　　　　　　　　　//线程池处于运行状态并且加入队列成功
            if (runState == RUNNING && workQueue.offer(command)) {
                if (runState != RUNNING || poolSize == 0)
                    ensureQueuedTaskHandled(command);
            }
　　　　　　　　　//线程池不处于运行状态或者加入队列失败，则创建线程（创建的是非核心线程）
            else if (!addIfUnderMaximumPoolSize(command))
　　　　　　　　　　　//创建线程失败，则采取阻塞处理的方式
                reject(command); // is shutdown or saturated
        }
    }
    线程池:
9.1:创建线程池有哪些好处？
	---9.1.1:减少系统资源的开销,每当任务数量超过当前核心线程数就会将一部分任务队列里面直至核心线程空闲重新从任务队列里面获取数据
	---9.1.2:避免无休止的创建线程导致系统崩溃

9.2:线程池为什么能维持线程不释放，随时运行各种任务？
	----9.2.1:是通过while和队列的take方法来控制的,核心线程会通过take方法尝试从任务队列里面取任务,直到队列里面有任务并执行,因为这个take方法是套在while(true)循环里面的且没有条件退出这个循环,
	所以核心线程会一直等待任务队列里面有数据

9.3:在线程池创建线程经历了一下几个步骤:
	9.3.1:看当前线程数量是否小于核心线程数
		---小于核心线程数则创建核心线程
		---大于核心线程数量则尝试将该线程加入任务队列

	9.3.2:看任务队列是否已满？
		---任务队列没满则将当前任务加入任务队列
		---任务队列已满则看当前线程池是否达到最大线程数量

	9.3.3:看当前线程熟练是否达到线程池最大数量？
		---没达到当前线程池最大的任务数量则创建普通线程
		---达到当前线程任务数量则按照策略处理无法执行的任务

9.4:几种线程池实例:
	9.4.1:ThreadPoolExecutor是比较传统的线程池创建方法.
	9.4.2:newFixedThreadPool基于ThreadPoolExecutor创建固定大小的线程池其中核心线程与最大线程数一致,任务队列是整数的最大值
		9.4.2.1:几种常用方法
			---1.shutdown:在所有任务都执行完成关闭当前线程池
			---2.shutdownNow:在当前线程的任务执行完成停止向线程队列取任务,并且返回未执行的任务,关闭线程池
			---3.isTerminated:在调用shutdown和shutdownNow之后并且任务执行完成返回true否则返回false
	9.4.3:newCachedThreadPool:基于ThreadPoolExecutor不创建核心线程,使任务线程延迟获取任务60秒
	9.4.4:newSingleThreadExecutor:只创建一个核心线程,任务的队列长度为整数的最大值
	9.4.5:newScheduledThreadPool:可以延迟或延迟循环执行某项任务
		9.4.5.1:常用方法:
			---1.延迟三秒后执行该任务:
				---service.schedule(new MyThread(),3, TimeUnit.SECONDS);
			---2.循环执行某项任务设置初始化时间和循环时间(是两项任务开始的时间间隔):
				---service.scheduleAtFixedRate(new MyThread(),2,5,TimeUnit.SECONDS);
	 		---3.循环执行某项任务设置,此延迟时间是相对于上一次任务执行完都到下一项任务开始执行的时间:
				---service.scheduleWithFixedDelay(new MyThread(),2,5,TimeUnit.SECONDS);
		9.4.5.2:与Timer区别:
			---1.Timer在执行任务的时候实际上是以Timer的属性TimerThread去执行TimerTask队列里面的任务,这是一种单线程的方式去执行任务,
			而newScheduledThreadPool是以多线程的任务去执行任务
			---2.newScheduledThreadPool支持相对时间和绝对时间两种,Timer只支持绝对时间,当程序执行时间大于延迟时间用Timer会出现预料之外的情况

10:能够实现真正的并发执行吗？
	---单核不行,多核CPU才可以
	单核CPU也能执行多个进程，这点大家都知道。
	但是并不是真正意义上的同时执行（并发执行）。
	虽然在单核CPU的电脑也能开启多个进程，但这些进程并不能同时被开启和执行，而是以轮换的机制执行的（是有时间顺序的），而CPU处理某个单一的操作速度是极快的，并且极快的在进程中切换，从而让人感觉是同时运行了多个进程、同时处理多个操作。
	这么做的原因之一是防止前一个任务耗时太长，导致后面简单的任务等待太久，而且电脑中有许多系统进程必须同时处于开启状态，所以CPU也必须采取这种办法来处理。
	理论上讲，真正意义上的同时执行的进程数不能超过CPU核心数。 同上理，单核CPU运行多个线程是可行的。因为线程是进程中的一个实体，一个进程可以开启多个线程，所以即使只开启单个进程也能开启多个线程在单核CPU上运行。但是同上理，单核CPU并不能真正意义上的实现线程并发。
	现在我们知道了，生活或工作中时常提到的所谓线程并发并非真正意义上的并发执行，这取决于CPU。

11:那么多线程实现并行处理还有必要吗？
	---答案是肯定的。多线程可以实现并行处理，避免了某项任务长时间占用CPU时间。
	对于单核单处理器（CPU）来说，为了运行所有这些线程，操作系统为每个独立线程安排一些CPU时间，操作系统以轮换方式向线程提供时间片，这就给人一种假象，好象这些线程都在同时运行。
	既然多线程实现并发确实能够提升性能，

12:那是否使用多线程并发是必须的呢？
	---答案是否定的，如果两个非常活跃的线程执行很简单的操作，为了抢夺对CPU的控制权，在线程切换时会消耗很多的CPU资源，反而会降低系统的性能。
	最开始，线程只是用于分配单个处理器的处理时间的一种工具。但假如操作系统本身支持多个处理器，那么每个线程都可分配给一个不同的处理器，真正进入“并行运算”状态。从程序设计语言的角度看，多线程操作最有价值的特性之一就是程序员不必关心到底使用了多少个处理器，程序员只需将程序编写成多线程模式即可。
	程序在逻辑意义上被分割为数个线程；假如机器本身安装了多个处理器，那么程序会运行得更快，毋需作出任何特殊的调校。
	多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。

13.什么是前台线程什么是守护线程(后台线程)?
	---1.后台线程是为前台线程服务的,例如GC.
	---2.前台线程和后台线程是没有多大区别的,唯一的区别是前台线程是在程序运行完就会等待垃圾回收机制回收,而后台线程是在所有前台线程被回收掉JVM会终止后台线程执行并退出
